"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ "–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
Telegram-–±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
"""
import logging
import os
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É src –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.config import BOT_TOKEN, ADMIN_USER_IDS, validate_config, DEBUG
from src.database import PerfumeDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO if not DEBUG else logging.DEBUG
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = PerfumeDatabase()

class PerfumeBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.db = db
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        welcome_text = f"""
üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å*!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –º–∏—Ä–µ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏.

üìö *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è —Å–ª–æ–≤–∞—Ä—è
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ä–º–∏–Ω", callback_data="random"),
                InlineKeyboardButton("üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")
            ],
            [
                InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Ä–º–∏–Ω", callback_data="suggest"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        inline_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=inline_markup
        )
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ—Å—Ç—É–ø—É –∫ –º–µ–Ω—é
        await update.message.reply_text(
            "üí° *–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é:*\n"
            "üì± –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ: –Ω–∞–∂–º–∏—Ç–µ ‚ò∞ (—Ç—Ä–∏ –ø–æ–ª–æ—Å–∫–∏) —Å–ª–µ–≤–∞ –æ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞\n"
            "üíª –ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ: –Ω–∞–ø–∏—à–∏—Ç–µ `/start` –∏–ª–∏ `/help`",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} (@{user.username})")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É "–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"*

üîç *–ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω –∏–∑ –º–∏—Ä–∞ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏, –∏ —è –æ–±—ä—è—Å–Ω—é –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ.

–ü—Ä–∏–º–µ—Ä—ã: "–≤–µ—Ä—Ö–Ω–∏–µ –Ω–æ—Ç—ã", "beast mode", "–∞—Ç–æ–º–∞–π–∑–µ—Ä"

üìã *–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*
üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ - –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ä–º–∏–Ω - –∏–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–Ω—è—Ç–∏–π
üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø–æ —Ç–µ–º–∞–º
üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Ä–º–∏–Ω - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

üéØ *–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ:*
‚Ä¢ –¢–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–µ—Ä–º–∏–Ω–∞
‚Ä¢ –°–∏–Ω–æ–Ω–∏–º–∞–º –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏–º–æ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π

üí° *–•–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å?*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Ä–º–∏–Ω" —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.

‚ùì *–ù–µ –Ω–∞—à–ª–∏ —Ç–µ—Ä–º–∏–Ω?*
–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–∞–Ω–∞–ª–∞ @your_admin –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Ä–º–∏–Ω"
        """
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def random_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random - —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ä–º–∏–Ω"""
        random_term = self.db.get_random_term()
        
        if not random_term:
            await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        await self.send_term_info(update, random_term, is_random=True)

    async def categories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories"""
        categories = self.db.get_categories()
        
        if not categories:
            await update.message.reply_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        text = "üìö *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Ä–º–∏–Ω–æ–≤:*\n\n"
        keyboard = []
        
        for category in categories:
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            with self.db.get_connection() as conn:
                cursor = conn.execute(
                    'SELECT COUNT(*) as count FROM terms WHERE category_id = ?',
                    (category['id'],)
                )
                count = cursor.fetchone()['count']
            
            text += f"üè∑Ô∏è *{category['name']}* ({count} —Ç–µ—Ä–º–∏–Ω–æ–≤)\n"
            if category['description']:
                text += f"   {category['description']}\n"
            text += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            keyboard.append([
                InlineKeyboardButton(
                    f"üìñ {category['name']} ({count})",
                    callback_data=f"category_{category['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        stats = self.db.get_stats()
        
        text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è:*

üìö –í—Å–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: *{stats['total_terms']}*
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π: *{stats['total_categories']}*
üîç –ü–æ–∏—Å–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: *{stats['searches_week']}*
üí° –û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: *{stats['pending_suggestions']}*

üî• *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:*
        """
        
        if stats['popular_terms']:
            for i, term in enumerate(stats['popular_terms'], 1):
                text += f"{i}. {term['term']} ({term['usage_count']} –∑–∞–ø—Ä–æ—Å–æ–≤)\n"
        else:
            text += "–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º"
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def search_terms(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        query = update.message.text.strip()
        user_id = update.effective_user.id
        
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        if query.startswith('/'):
            return
        
        logger.info(f"–ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞: '{query}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        # –ò—â–µ–º —Ç–µ—Ä–º–∏–Ω—ã
        results = self.db.search_terms(query)
        
        if not results:
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫
            self.db.log_search(user_id, query, found=False)
            
            await update.message.reply_text(
                f"‚ùå –¢–µ—Ä–º–∏–Ω '*{query}*' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã\n"
                "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏\"\n"
                "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω: –∫–Ω–æ–ø–∫–∞ \"üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Ä–º–∏–Ω\"",
                parse_mode='Markdown'
            )
            return
        
        if len(results) == 1:
            # –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω —Ç–µ—Ä–º–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            term = results[0]
            self.db.log_search(user_id, query, term['id'], found=True)
            self.db.increment_usage(term['id'])
            await self.send_term_info(update, term)
        else:
            # –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            text = f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '*{query}*' –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ç–µ—Ä–º–∏–Ω–æ–≤:\n\n"
            keyboard = []
            
            for i, term in enumerate(results[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                text += f"{i}. *{term['term']}*"
                if term['category_name']:
                    text += f" ({term['category_name']})"
                text += "\n"
                
                keyboard.append([
                    InlineKeyboardButton(
                        f"{i}. {term['term']}",
                        callback_data=f"term_{term['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

    async def send_term_info(self, update: Update, term: dict, is_random: bool = False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ä–º–∏–Ω–µ"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ä–º–∏–Ω–µ
        text = f"üìö *{term['term']}*\n\n"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        text += f"üìñ {term['definition']}\n\n"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        if term['category_name']:
            text += f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {term['category_name']}\n"
        
        # –ü—Ä–∏–º–µ—Ä—ã
        if term['examples']:
            text += f"üí° *–ü—Ä–∏–º–µ—Ä—ã:* {term['examples']}\n"
        
        # –°–∏–Ω–æ–Ω–∏–º—ã
        if term['synonyms']:
            text += f"üîÑ *–°–∏–Ω–æ–Ω–∏–º—ã:* {term['synonyms']}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if term['usage_count'] > 0:
            text += f"üìä *–ó–∞–ø—Ä–æ—Å–æ–≤:* {term['usage_count']}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("üé≤ –î—Ä—É–≥–æ–π —Å–ª—É—á–∞–π–Ω—ã–π", callback_data="random"),
                InlineKeyboardButton("üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")
            ]
        ]
        
        if not is_random:
            keyboard.append([
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "start":
            await self.start_callback(update, context)
        elif data == "help":
            await self.help_callback(update, context)
        elif data == "random":
            await self.random_callback(update, context)
        elif data == "categories":
            await self.categories_callback(update, context)
        elif data.startswith("category_"):
            category_id = int(data.split("_")[1])
            await self.show_category_terms(update, category_id)
        elif data.startswith("term_"):
            term_id = int(data.split("_")[1])
            await self.show_term_by_id(update, term_id)
        elif data == "suggest":
            await self.suggest_callback(update, context)
        elif data == "stats":
            await self.stats_callback(update, context)

    async def start_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
        user = update.effective_user
        
        welcome_text = f"""
üå∏ *–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?

üîç –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ä–º–∏–Ω", callback_data="random"),
                InlineKeyboardButton("üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")
            ],
            [
                InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Ä–º–∏–Ω", callback_data="suggest"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        inline_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=inline_markup
        )

    async def help_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
        help_text = """
üìñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

üîç *–ü–æ–∏—Å–∫:* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω
üí° *–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å:* –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Ä–º–∏–Ω"
üé≤ *–ò–∑—É—á–∞—Ç—å:* –ù–∞–∂–∏–º–∞–π—Ç–µ "–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ä–º–∏–Ω"
üìö *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –ø–æ —Ç–µ–º–∞–º

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–≤–µ—Ä—Ö–Ω–∏–µ –Ω–æ—Ç—ã"
‚Ä¢ "beast mode" 
‚Ä¢ "–∞—Ç–æ–º–∞–π–∑–µ—Ä"
‚Ä¢ "—Ñ–ª—ç–Ω–∫–µ—Ä"
        """
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            help_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def random_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ä–º–∏–Ω'"""
        random_term = self.db.get_random_term()
        
        if random_term:
            await self.send_term_info(update, random_term, is_random=True)
        else:
            await update.callback_query.edit_message_text("‚ùå –¢–µ—Ä–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    async def categories_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'"""
        categories = self.db.get_categories()
        
        if not categories:
            await update.callback_query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        text = "üìö *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Ä–º–∏–Ω–æ–≤:*\n\n"
        keyboard = []
        
        for category in categories:
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            with self.db.get_connection() as conn:
                cursor = conn.execute(
                    'SELECT COUNT(*) as count FROM terms WHERE category_id = ?',
                    (category['id'],)
                )
                count = cursor.fetchone()['count']
            
            text += f"üè∑Ô∏è *{category['name']}* ({count} —Ç–µ—Ä–º–∏–Ω–æ–≤)\n"
            if category['description']:
                text += f"   {category['description']}\n"
            text += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            keyboard.append([
                InlineKeyboardButton(
                    f"üìñ {category['name']} ({count})",
                    callback_data=f"category_{category['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def suggest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /suggest –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞"""
        text = """
üí° *–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω!*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
```
–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
```

*–ü—Ä–∏–º–µ—Ä:*
```
–í–∏–Ω—Ç–∞–∂
–°—Ç–∞—Ä—ã–π, —Ä–µ–¥–∫–∏–π –∞—Ä–æ–º–∞—Ç –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç
–ñ–∞—Ä–≥–æ–Ω
"–≠—Ç–æ—Ç –≤–∏–Ω—Ç–∞–∂ 80-—Ö –≥–æ–¥–æ–≤ —Å—Ç–æ–∏—Ç —Ü–µ–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
```

–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        """
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def suggest_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Ä–º–∏–Ω'"""
        text = """
üí° *–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω!*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
```
–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
```

*–ü—Ä–∏–º–µ—Ä:*
```
–í–∏–Ω—Ç–∞–∂
–°—Ç–∞—Ä—ã–π, —Ä–µ–¥–∫–∏–π –∞—Ä–æ–º–∞—Ç –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç
–ñ–∞—Ä–≥–æ–Ω
"–≠—Ç–æ—Ç –≤–∏–Ω—Ç–∞–∂ 80-—Ö –≥–æ–¥–æ–≤ —Å—Ç–æ–∏—Ç —Ü–µ–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
```

–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        """
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def show_category_terms(self, update: Update, category_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        with self.db.get_connection() as conn:
            cursor = conn.execute('SELECT * FROM categories WHERE id = ?', (category_id,))
            category = cursor.fetchone()
            
            if not category:
                await update.callback_query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ä–º–∏–Ω—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            cursor = conn.execute('''
                SELECT * FROM terms 
                WHERE category_id = ? 
                ORDER BY term
            ''', (category_id,))
            terms = cursor.fetchall()
        
        if not terms:
            text = f"üìö *{category['name']}*\n\n–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Ä–º–∏–Ω–æ–≤."
        else:
            text = f"üìö *{category['name']}* ({len(terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤)\n\n"
            
            keyboard = []
            for term in terms[:15]:  # –ú–∞–∫—Å–∏–º—É–º 15 —Ç–µ—Ä–º–∏–Ω–æ–≤
                text += f"‚Ä¢ {term['term']}\n"
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìñ {term['term']}",
                        callback_data=f"term_{term['id']}"
                    )
                ])
            
            if len(terms) > 15:
                text += f"\n... –∏ –µ—â–µ {len(terms) - 15} —Ç–µ—Ä–º–∏–Ω–æ–≤"
        
        keyboard = keyboard or []
        keyboard.append([
            InlineKeyboardButton("üìö –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
        ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def stats_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
        stats = self.db.get_database_stats()
        
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è*

üìö –í—Å–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: *{stats['total_terms']}*
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π: *{stats['total_categories']}*
üîç –ü–æ–∏—Å–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: *{stats['searches_week']}*
üí° –û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: *{stats['pending_suggestions']}*

üî• *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:*
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if stats.get('popular_terms'):
            for i, term in enumerate(stats['popular_terms'][:5], 1):
                stats_text += f"{i}. {term['term']} ({term['usage_count']} –∑–∞–ø—Ä–æ—Å–æ–≤)\n"
        else:
            stats_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–æ–≤"
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            stats_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def show_term_by_id(self, update: Update, term_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω –ø–æ ID"""
        term = self.db.get_term_by_id(term_id)
        
        if term:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.db.increment_usage(term_id)
            await self.send_term_info(update, term)
        else:
            await update.callback_query.edit_message_text("‚ùå –¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

async def setup_bot_commands(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é"""
    commands = [
        BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("help", "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    ]
    await application.bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    import fcntl
    import sys
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º lock-–º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not os.path.exists("data"):
        os.makedirs("data")
        logger.info("–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ data")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    try:
        db_test = PerfumeDatabase()
        stats = db_test.get_database_stats()
        if stats['total_terms'] == 0:
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            # –ó–¥–µ—Å—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ __init__
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞: {stats['total_terms']} —Ç–µ—Ä–º–∏–Ω–æ–≤")
        db_test.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    is_valid, message = validate_config()
    if not is_valid:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {message}")
        return
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ '–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = PerfumeBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏ —Ä—É—Å—Å–∫–∏–µ)
    # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)
    app.add_handler(CommandHandler("start", bot.start_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(bot.button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.search_terms))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(bot.error_handler)
    
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    async def post_init(application):
        await setup_bot_commands(application)
    
    app.post_init = post_init
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
